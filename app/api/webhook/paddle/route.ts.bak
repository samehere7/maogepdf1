import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

// 使用服务角色密钥进行webhook操作
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
const supabase = createClient(supabaseUrl, supabaseServiceKey)

interface PaddleWebhookPayload {
  alert_name: string
  event_time: string
  passthrough?: string
  user_id?: string
  subscription_id?: string
  subscription_plan_id?: string
  status?: string
  user_email?: string
  next_bill_date?: string
  update_url?: string
  cancel_url?: string
  checkout_id?: string
  order_id?: string
}

export async function POST(req: NextRequest) {
  try {
    // 检查环境变量
    if (!supabaseUrl || !supabaseServiceKey) {
      console.error('Missing Supabase environment variables')
      return NextResponse.json({ error: 'Configuration error' }, { status: 500 })
    }

    const payload: PaddleWebhookPayload = await req.json()
    
    console.log('Paddle webhook received:', payload.alert_name, JSON.stringify(payload, null, 2))

    // 处理不同类型的webhook事件
    switch (payload.alert_name) {
      case 'subscription_created':
      case 'subscription_payment_succeeded':
        await handleSubscriptionSuccess(payload)
        break
      
      case 'subscription_cancelled':
      case 'subscription_payment_failed':
        await handleSubscriptionCancelled(payload)
        break
      
      case 'payment_succeeded':
        await handlePaymentSuccess(payload)
        break
        
      default:
        console.log('Unhandled webhook event:', payload.alert_name)
        return NextResponse.json({ success: true, message: 'Event ignored' })
    }

    return NextResponse.json({ success: true })
    
  } catch (error) {
    console.error('Webhook processing error:', error)
    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 })
  }
}

async function handleSubscriptionSuccess(payload: PaddleWebhookPayload) {
  try {
    let userId: string
    let plan: string

    // 从passthrough数据中获取用户信息
    if (payload.passthrough) {
      try {
        const passthroughData = JSON.parse(payload.passthrough)
        userId = passthroughData.userId
        plan = passthroughData.plan
        console.log('Parsed passthrough data:', { userId, plan })
      } catch (parseError) {
        console.error('Failed to parse passthrough data:', parseError)
        throw new Error('Invalid passthrough data')
      }
    } else {
      console.error('No passthrough data found in webhook')
      throw new Error('Missing passthrough data')
    }

    // 计算过期时间
    const now = new Date()
    const expireAt = new Date(now)
    if (plan === 'yearly') {
      expireAt.setFullYear(expireAt.getFullYear() + 1)
    } else if (plan === 'monthly') {
      expireAt.setMonth(expireAt.getMonth() + 1)
    }

    console.log('Updating user profile for:', userId)
    
    // 使用原始SQL操作来避免RLS问题
    const { data: profileData, error: profileError } = await supabase.rpc('update_user_plus_status', {
      user_id: userId,
      is_plus: true,
      is_active_param: true,
      expire_at_param: expireAt.toISOString(),
      plan_param: plan
    })

    if (profileError) {
      console.error('Failed to update user profile via RPC:', profileError)
      // 如果RPC失败，尝试直接更新（需要正确的权限）
      const { error: directUpdateError } = await supabase
        .from('user_profiles')
        .upsert({
          id: userId,
          plus: true,
          is_active: true,
          expire_at: expireAt.toISOString(),
          updated_at: now.toISOString()
        })
      
      if (directUpdateError) {
        console.error('Direct update also failed:', directUpdateError)
        throw directUpdateError
      }
    }

    // 更新或创建plus记录
    const { error: plusError } = await supabase
      .from('plus')
      .upsert({
        id: userId,
        is_paid: true,
        paid_at: now.toISOString(),
        plan: plan,
        expire_at: expireAt.toISOString(),
        pdf_count: 0,
        chat_count: 0
      })

    if (plusError) {
      console.error('Failed to update plus record:', plusError)
      // 不抛出错误，因为主要的user_profiles更新已经成功
      console.log('Plus record update failed, but continuing...')
    }

    console.log(`Successfully activated Plus subscription for user ${userId}, plan: ${plan}`)

  } catch (error) {
    console.error('Error handling subscription success:', error)
    throw error
  }
}

async function handleSubscriptionCancelled(payload: PaddleWebhookPayload) {
  try {
    let userId: string

    if (payload.passthrough) {
      const passthroughData = JSON.parse(payload.passthrough)
      userId = passthroughData.userId
    } else {
      console.error('No passthrough data found in webhook')
      return
    }

    // 更新用户状态为非活跃（但保留到期时间，让其自然过期）
    const { error: profileError } = await supabase
      .from('user_profiles')
      .update({
        plus: false,
        is_active: false,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId)

    if (profileError) {
      console.error('Failed to update user profile:', profileError)
      throw profileError
    }

    // 更新plus记录
    const { error: plusError } = await supabase
      .from('plus')
      .update({
        is_paid: false
      })
      .eq('id', userId)

    if (plusError) {
      console.error('Failed to update plus record:', plusError)
    }

    console.log(`Successfully cancelled Plus subscription for user ${userId}`)

  } catch (error) {
    console.error('Error handling subscription cancellation:', error)
    throw error
  }
}

async function handlePaymentSuccess(payload: PaddleWebhookPayload) {
  // 对于一次性支付，可以使用类似的逻辑
  await handleSubscriptionSuccess(payload)
}